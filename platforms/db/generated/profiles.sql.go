// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles(
    user_id,
    display_name,
    avatar_url,
    bio,
    last_seen
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING user_id, display_name, avatar_url, bio, last_seen
`

type CreateProfileParams struct {
	UserID      uuid.UUID          `json:"user_id"`
	DisplayName pgtype.Text        `json:"display_name"`
	AvatarUrl   pgtype.Text        `json:"avatar_url"`
	Bio         pgtype.Text        `json:"bio"`
	LastSeen    pgtype.Timestamptz `json:"last_seen"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.UserID,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Bio,
		arg.LastSeen,
	)
	var i Profile
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.LastSeen,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT user_id, display_name, avatar_url, bio, last_seen FROM profiles WHERE user_id = $1
`

func (q *Queries) GetProfile(ctx context.Context, userID uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, userID)
	var i Profile
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.LastSeen,
	)
	return i, err
}
