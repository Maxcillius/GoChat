// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id,
    email,
    password_hash,
    is_verified
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, email
`

type CreateUserParams struct {
	ID           uuid.UUID   `json:"id"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	IsVerified   pgtype.Bool `json:"is_verified"`
}

type CreateUserRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.IsVerified,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, is_verified FROM users WHERE id = $1
`

type GetUserRow struct {
	ID         uuid.UUID   `json:"id"`
	Email      string      `json:"email"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Email, &i.IsVerified)
	return i, err
}
