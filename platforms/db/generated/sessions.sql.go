// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(
    id,
    user_id,
    refresh_token,
    ip_address,
    user_agent,
    expires_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, user_id, refresh_token, expires_at
`

type CreateSessionParams struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	IpAddress    pgtype.Text        `json:"ip_address"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

type CreateSessionRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (CreateSessionRow, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i CreateSessionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, expires_at FROM sessions WHERE user_id = $1
`

type GetSessionRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) GetSession(ctx context.Context, userID pgtype.UUID) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i GetSessionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
	)
	return i, err
}
